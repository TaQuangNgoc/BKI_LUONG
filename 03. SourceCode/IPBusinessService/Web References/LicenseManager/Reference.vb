'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
'
Namespace LicenseManager
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LicenseManagerSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class LicenseManager
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private checkKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkTrialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkMacTrialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private activeKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private activeTrialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTrialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLicenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getInfoServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.IP.Core.IPBusinessService.My.MySettings.Default.IPBusinessService_LicenseManager_LicenseManager
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event checkKeyCompleted As checkKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event checkTrialCompleted As checkTrialCompletedEventHandler
        
        '''<remarks/>
        Public Event checkMacTrialCompleted As checkMacTrialCompletedEventHandler
        
        '''<remarks/>
        Public Event activeKeyCompleted As activeKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event activeTrialCompleted As activeTrialCompletedEventHandler
        
        '''<remarks/>
        Public Event getTrialCompleted As getTrialCompletedEventHandler
        
        '''<remarks/>
        Public Event getLicenseCompleted As getLicenseCompletedEventHandler
        
        '''<remarks/>
        Public Event getInfoServerCompleted As getInfoServerCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkKey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkKey(ByVal macAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("checkKey", New Object() {macAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkKeyAsync(ByVal macAddress As String)
            Me.checkKeyAsync(macAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkKeyAsync(ByVal macAddress As String, ByVal userState As Object)
            If (Me.checkKeyOperationCompleted Is Nothing) Then
                Me.checkKeyOperationCompleted = AddressOf Me.OncheckKeyOperationCompleted
            End If
            Me.InvokeAsync("checkKey", New Object() {macAddress}, Me.checkKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkKeyCompleted(Me, New checkKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkTrial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkTrial(ByVal macAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("checkTrial", New Object() {macAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkTrialAsync(ByVal macAddress As String)
            Me.checkTrialAsync(macAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkTrialAsync(ByVal macAddress As String, ByVal userState As Object)
            If (Me.checkTrialOperationCompleted Is Nothing) Then
                Me.checkTrialOperationCompleted = AddressOf Me.OncheckTrialOperationCompleted
            End If
            Me.InvokeAsync("checkTrial", New Object() {macAddress}, Me.checkTrialOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckTrialOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkTrialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkTrialCompleted(Me, New checkTrialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkMacTrial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkMacTrial(ByVal macAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("checkMacTrial", New Object() {macAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkMacTrialAsync(ByVal macAddress As String)
            Me.checkMacTrialAsync(macAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkMacTrialAsync(ByVal macAddress As String, ByVal userState As Object)
            If (Me.checkMacTrialOperationCompleted Is Nothing) Then
                Me.checkMacTrialOperationCompleted = AddressOf Me.OncheckMacTrialOperationCompleted
            End If
            Me.InvokeAsync("checkMacTrial", New Object() {macAddress}, Me.checkMacTrialOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckMacTrialOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkMacTrialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkMacTrialCompleted(Me, New checkMacTrialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/activeKey", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function activeKey(ByVal macAddress As String, ByVal company As String, ByVal key As String) As Boolean
            Dim results() As Object = Me.Invoke("activeKey", New Object() {macAddress, company, key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub activeKeyAsync(ByVal macAddress As String, ByVal company As String, ByVal key As String)
            Me.activeKeyAsync(macAddress, company, key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub activeKeyAsync(ByVal macAddress As String, ByVal company As String, ByVal key As String, ByVal userState As Object)
            If (Me.activeKeyOperationCompleted Is Nothing) Then
                Me.activeKeyOperationCompleted = AddressOf Me.OnactiveKeyOperationCompleted
            End If
            Me.InvokeAsync("activeKey", New Object() {macAddress, company, key}, Me.activeKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnactiveKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.activeKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent activeKeyCompleted(Me, New activeKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/activeTrial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function activeTrial(ByVal macAddress As String, ByVal company As String, ByVal email As String, ByVal phone As String) As Boolean
            Dim results() As Object = Me.Invoke("activeTrial", New Object() {macAddress, company, email, phone})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub activeTrialAsync(ByVal macAddress As String, ByVal company As String, ByVal email As String, ByVal phone As String)
            Me.activeTrialAsync(macAddress, company, email, phone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub activeTrialAsync(ByVal macAddress As String, ByVal company As String, ByVal email As String, ByVal phone As String, ByVal userState As Object)
            If (Me.activeTrialOperationCompleted Is Nothing) Then
                Me.activeTrialOperationCompleted = AddressOf Me.OnactiveTrialOperationCompleted
            End If
            Me.InvokeAsync("activeTrial", New Object() {macAddress, company, email, phone}, Me.activeTrialOperationCompleted, userState)
        End Sub
        
        Private Sub OnactiveTrialOperationCompleted(ByVal arg As Object)
            If (Not (Me.activeTrialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent activeTrialCompleted(Me, New activeTrialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTrial", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTrial(ByVal macAddress As String) As CTrial
            Dim results() As Object = Me.Invoke("getTrial", New Object() {macAddress})
            Return CType(results(0),CTrial)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTrialAsync(ByVal macAddress As String)
            Me.getTrialAsync(macAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTrialAsync(ByVal macAddress As String, ByVal userState As Object)
            If (Me.getTrialOperationCompleted Is Nothing) Then
                Me.getTrialOperationCompleted = AddressOf Me.OngetTrialOperationCompleted
            End If
            Me.InvokeAsync("getTrial", New Object() {macAddress}, Me.getTrialOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTrialOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTrialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTrialCompleted(Me, New getTrialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLicense", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLicense(ByVal macAddress As String) As CLicense
            Dim results() As Object = Me.Invoke("getLicense", New Object() {macAddress})
            Return CType(results(0),CLicense)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLicenseAsync(ByVal macAddress As String)
            Me.getLicenseAsync(macAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLicenseAsync(ByVal macAddress As String, ByVal userState As Object)
            If (Me.getLicenseOperationCompleted Is Nothing) Then
                Me.getLicenseOperationCompleted = AddressOf Me.OngetLicenseOperationCompleted
            End If
            Me.InvokeAsync("getLicense", New Object() {macAddress}, Me.getLicenseOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLicenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLicenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLicenseCompleted(Me, New getLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInfoServer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getInfoServer(ByVal macAddress As String) As DB_ISALARY
            Dim results() As Object = Me.Invoke("getInfoServer", New Object() {macAddress})
            Return CType(results(0),DB_ISALARY)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getInfoServerAsync(ByVal macAddress As String)
            Me.getInfoServerAsync(macAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getInfoServerAsync(ByVal macAddress As String, ByVal userState As Object)
            If (Me.getInfoServerOperationCompleted Is Nothing) Then
                Me.getInfoServerOperationCompleted = AddressOf Me.OngetInfoServerOperationCompleted
            End If
            Me.InvokeAsync("getInfoServer", New Object() {macAddress}, Me.getInfoServerOperationCompleted, userState)
        End Sub
        
        Private Sub OngetInfoServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.getInfoServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getInfoServerCompleted(Me, New getInfoServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class CTrial
        
        Private eMAILField As String
        
        Private pHONEField As String
        
        Private tRAIL_TIMEField As Date
        
        Private eXPIRY_DATEField As Date
        
        Private cOMPANYField As String
        
        '''<remarks/>
        Public Property EMAIL() As String
            Get
                Return Me.eMAILField
            End Get
            Set
                Me.eMAILField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PHONE() As String
            Get
                Return Me.pHONEField
            End Get
            Set
                Me.pHONEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TRAIL_TIME() As Date
            Get
                Return Me.tRAIL_TIMEField
            End Get
            Set
                Me.tRAIL_TIMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EXPIRY_DATE() As Date
            Get
                Return Me.eXPIRY_DATEField
            End Get
            Set
                Me.eXPIRY_DATEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property COMPANY() As String
            Get
                Return Me.cOMPANYField
            End Get
            Set
                Me.cOMPANYField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class DB_ISALARY
        
        Private idField As Integer
        
        Private dBNAMEField As String
        
        Private uSERNAMEField As String
        
        Private pASSWORDField As String
        
        Private cREATE_TIMEField As Date
        
        Private cOMPANYField As String
        
        '''<remarks/>
        Public Property ID() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DBNAME() As String
            Get
                Return Me.dBNAMEField
            End Get
            Set
                Me.dBNAMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property USERNAME() As String
            Get
                Return Me.uSERNAMEField
            End Get
            Set
                Me.uSERNAMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PASSWORD() As String
            Get
                Return Me.pASSWORDField
            End Get
            Set
                Me.pASSWORDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CREATE_TIME() As Date
            Get
                Return Me.cREATE_TIMEField
            End Get
            Set
                Me.cREATE_TIMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property COMPANY() As String
            Get
                Return Me.cOMPANYField
            End Get
            Set
                Me.cOMPANYField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class CLicense
        
        Private cOMPANYField As String
        
        Private cREATE_TIMEField As Date
        
        Private eXPIRY_DATEField As Date
        
        '''<remarks/>
        Public Property COMPANY() As String
            Get
                Return Me.cOMPANYField
            End Get
            Set
                Me.cOMPANYField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CREATE_TIME() As Date
            Get
                Return Me.cREATE_TIMEField
            End Get
            Set
                Me.cREATE_TIMEField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EXPIRY_DATE() As Date
            Get
                Return Me.eXPIRY_DATEField
            End Get
            Set
                Me.eXPIRY_DATEField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub checkKeyCompletedEventHandler(ByVal sender As Object, ByVal e As checkKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub checkTrialCompletedEventHandler(ByVal sender As Object, ByVal e As checkTrialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkTrialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub checkMacTrialCompletedEventHandler(ByVal sender As Object, ByVal e As checkMacTrialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkMacTrialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub activeKeyCompletedEventHandler(ByVal sender As Object, ByVal e As activeKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class activeKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub activeTrialCompletedEventHandler(ByVal sender As Object, ByVal e As activeTrialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class activeTrialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getTrialCompletedEventHandler(ByVal sender As Object, ByVal e As getTrialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTrialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CTrial
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CTrial)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getLicenseCompletedEventHandler(ByVal sender As Object, ByVal e As getLicenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLicenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CLicense
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CLicense)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getInfoServerCompletedEventHandler(ByVal sender As Object, ByVal e As getInfoServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getInfoServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DB_ISALARY
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DB_ISALARY)
            End Get
        End Property
    End Class
End Namespace
